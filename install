#!/usr/bin/env bash
# netj's dotfiles installer
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2006-05-21
set -eu

DotfilesRoot=$(cd "$(dirname "$0")" >/dev/null; pwd)
Home=$(cd >/dev/null; pwd)

### some vocabularies first ###################################################

# install symlinks
#  determine relative path to DotfilesRoot from Home
dotdots() {
    tr / '\n' <<<"$1" |
    sed -n '/^$/d; s/.*/../p' |
    tr '\n' /
}
if [[ $DotfilesRoot != $Home/.dotfiles ]]; then
    if [[ $DotfilesRoot = $Home* ]]; then
        echo >&2 "WARNING: ~${DotfilesRoot#$Home}: not a standard location. (~/.dotfiles recommended)"
        dotfilesRel=${DotfilesRoot#$Home/}
    else
        echo >&2 "WARNING: $DotfilesRoot: not under home directory ($Home)"
        dotfilesRel=$DotfilesRoot
    fi
else
    dotfilesRel=.dotfiles
fi
install() {
    local dst=$1
    local src=${2:-$dst}
    local nosymlink=${3:-false}
    local nobackup=${4:-false}
    local n=$(shname "$dst")
    # compute relative path
    local rel=
    case $dst in
        */*) # need relative path to DotfilesRoot if path has depth
        local dd=$(dirname "$dst")
        mkdir -p ~/"$dd"
        case $dotfilesRel in
            /*)
                # no $rel prefix needed for an absolute path
                ;;
            *)
                rel=$(dotdots "$dd")
                ;;
        esac
        ;;
    esac
    # check if our link is already there
    if [ ~/"$dst" -ef "$DotfilesRoot/$src" ]; then
        run ${n}_before "$@"
        echo "$dst installed"
        run ${n}_after "$@"
    else
        while read -p "install $dst? [yNq] " -n1; do
            echo
            case "$REPLY" in
                [Yy]) # yes, install
                    run ${n}_before "$@"
                    # backup previous one
                    ! [ -e ~/"$dst" ] || $nobackup || mv -iv ~/"$dst" ~/"$dst"~
                    # create a symlink or a hardlink
                    if $nosymlink; then
                        ln -fv "$src" ~/"$dst"
                    else
                        ln -snfv "$rel$dotfilesRel/$src" ~/"$dst"
                    fi
                    run ${n}_after "$@"
                    break
                    ;;
                [Nn]|"") # no, skip
                    break
                    ;;
                [Qq]) # quit, abort installation
                    exit 2
                    ;;
                *) # pardon me?
                    ;;
            esac
        done
    fi
}
shname() {
    local n=$1
    # sanitize name
    n=${n#.}
    n=${n//[\/. -]/_}
    echo "$n"
}
run() { [ "`type -t $1 2>/dev/null`" != function ] || (cd; "$@"); }
safeln() {
    local src=$1; shift
    local tgt=
    for tgt in "$@"; do
        if [ -e "$tgt" ]; then
            [ "`readlink "$tgt"`" != "$src" ] || continue
            mv -iv "$tgt" "$tgt~"
        fi
        [ -e "$tgt" ] || ln -sfnv "$src" "$tgt"
    done
}
has() { type "$1" &>/dev/null; }

###############################################################################


# make sure we have all the git submodules in place
if has git; then
(
cd "$DotfilesRoot"
git submodule | grep ^- | awk '{print $2}' | xargs git submodule update --init
)
fi


# core
bash_after() {
    # .bash{rc,_profile} symlinks
    (cd
    safeln .bash/profile .bash{rc,_profile}
    safeln .bash/logout .bash_logout
    plugins=(
        bash_completion
        alias_completion
        environment
        prompt
        xtermtitle
        try+repeat
        auto-tmux
        git-helper
    )
    . .bash/plugins/bpm.sh enable "${plugins[@]}"
    )
}
install .bash
install .inputrc

if has vim; then
vim_after() { make -C .vim; }
install .vimrc
install .vim
fi

if has git; then
git_excludesfile_after() {
    git config --global core.excludesfile ~/.git-excludesfile
}
install .git-excludesfile
fi

! has tmux ||
install .tmux.conf
! has screen ||
install .screenrc
install .toprc

if has emacs; then
emacs_d_elisp_Makefile_after() { make -C .emacs.d/elisp; }
install .emacs
install .emacs.d/elisp/Makefile
fi


# GUI
fonts_after() { make -C .fonts; }
install .fonts.conf
install .fonts


# Mac OS X
case $(uname) in Darwin)
    # install applescripts
    cd "$DotfilesRoot"
    scptd=Mac/Scripts/compiled/
    mkdir -p "$scptd"
    compilescpt() {
        local o=$1 s="$2"
        cd "$DotfilesRoot"
        local n=$(shname "$o")
        run ${n}_before "$@"
        ! [ "$o" -nt "$s" ] || return 0
        echo "$o: compiling ${s##*/}"
        mkdir -p "$(dirname "$o")"
        xattr -w com.apple.TextEncoding 'UTF-8;134217984' "$s"
        osacompile -x -o "$o" "$s"
    }
    installscpt() {
        local src=$1
        local srcrel=${src#Mac/Scripts/}
        local obj="$scptd${srcrel%.applescript}".scpt
        local dst=Library/Scripts/"${obj#$scptd}"
        local n=$(shname "$dst")
        [ x"$(type -t ${n}_before)" = x"function" ] ||
            eval "${n}_before() { compilescpt '${obj//\'/\'\\\'\'}' '${src//\'/\'\\\'\'}'; }" # TODO escape obj and src
        install "$dst" "$obj" true true
    }
    Mac_Scripts_compiled_Applications_Finder_lselect_scpt_before() {
        cd "$DotfilesRoot"
        ! [ -e Mac/Scripts/Applications/Finder/lselect.applescript ] || return 0
        curl -RLo Mac/Scripts/Applications/Finder/lselect.applescript http://anoved.net/files/lselect.applescript
    }
    Library_Scripts_Applications_iTunes_iTunes_SED_scpt_before() {
        cd "$DotfilesRoot"
        ! [ -e "$scptd"/Applications/iTunes/iTunes\ SED.scpt ] || return 0
        curl -RLO http://aurelio.googlecode.com/files/iTunes_SED-1.1.zip
        ditto -xk iTunes_SED-*.zip "$scptd"/Applications/iTunes/
        rm -f iTunes_SED-*.zip
    }
    for s in Mac/Scripts/{*,Applications/{*/*,Finder/lselect,iTunes/iTunes\ SED}}.applescript; do
        [ -e "$s" ] || continue
        installscpt "$s"
    done
    for s in Mac/Scripts/*.sh; do
        [ -e "$s" ] || continue
        install Library/"${s#Mac/}" "$s" true true
    done

    # install KeyRemap4MacBook settings
    for xml in Mac/KeyRemap4MacBook/*.xml; do
        [ -e "$xml" ] || continue
        install Library/"Application Support"/"${xml#Mac/}" "$xml"
        Library_Application_Support_KeyRemap4MacBook_private_xml_after() {
            local x="$(mdfind KeyRemap4MacBook_cli.app | head -n 1)/Contents/MacOS/KeyRemap4MacBook_cli"
            ! [ -x "$x" ] || "$x" reloadxml
        }
    done

    # DefaultKeyBinding.dict
    # See: http://hints.macworld.com/article.php?story=20060317045211408
    # See: http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html
    install Library/KeyBindings/DefaultKeyBinding.dict Mac/KeyBindings/DefaultKeyBinding.dict true
;; esac
